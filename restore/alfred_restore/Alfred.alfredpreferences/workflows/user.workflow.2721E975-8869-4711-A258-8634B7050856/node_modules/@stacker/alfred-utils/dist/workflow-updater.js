"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowUpdater = void 0;
const axios_1 = __importDefault(require("axios"));
const plist_1 = __importDefault(require("plist"));
const fs = __importStar(require("fs"));
const child_process = __importStar(require("child_process"));
const utils_1 = __importDefault(require("./utils"));
class WorkflowUpdater {
    constructor(remoteInfoListURL, remoteWorkflowURL, localVersion, autoOpen = true) {
        this.shouldUpdate = false;
        this.remoteInfoListURL = remoteInfoListURL;
        this.remoteWorkflowURL = remoteWorkflowURL;
        this.localVersion = localVersion;
        this.latestVersion = localVersion;
        this.autoOpen = autoOpen;
    }
    /**
     * Ê£ÄÊü•ËøúÁ®ã‰∏éÊú¨Âú∞ÁâàÊú¨Â∑ÆÂºÇ
     */
    async checkVersion() {
        const res = await axios_1.default.get(this.remoteInfoListURL);
        const plistObj = plist_1.default.parse(res.data);
        this.latestVersion = plistObj.version;
        this.shouldUpdate = this.latestVersion !== this.localVersion;
    }
    /**
     * ‰∏ãËΩΩÂπ∂ÂÆâË£Öworkflow
     * @param targetDir
     * @return {Promise<boolean>}
     */
    async download(targetDir = process.env.HOME + '/Downloads/') {
        var _a;
        const res = await axios_1.default.get(this.remoteWorkflowURL, { responseType: "arraybuffer" });
        const filename = ((_a = this.remoteWorkflowURL.match(/[^/]+\.alfredworkflow/)) === null || _a === void 0 ? void 0 : _a[0]) || `${new Date().getTime()}.alfredworkflow`;
        fs.writeFileSync(targetDir + filename, res.data);
        if (this.autoOpen) {
            child_process.execSync(`open ${targetDir + filename}`);
        }
        return true;
    }
    /**
     * ÂàõÂª∫ÂçáÁ∫ßÈ°π-ÁªìÊûúË°å
     * @return {{subtitle: string, arg: string, icon: {path: string}, title: string}}
     */
    createUpdateScriptFilterItem() {
        if (this.shouldUpdate) {
            return utils_1.default.buildItem({
                title: "A new version is available! üéâ ",
                subtitle: "press ‚èé to install update",
                arg: 'update_workflow',
                icon: {
                    path: 'icon_update.png'
                }
            });
        }
    }
}
exports.WorkflowUpdater = WorkflowUpdater;
