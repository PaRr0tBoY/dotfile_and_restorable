"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflow = void 0;
const utils_1 = __importStar(require("./utils"));
const pinyin_pro_1 = require("pinyin-pro");
class Workflow {
    constructor(items = [], cacheable = false) {
        this.items = items;
        this.sortedItems = [];
        if (cacheable) {
            utils_1.default.useCache();
        }
    }
    /**
     * 缓存数据显示
     */
    runWithCacheData(config = { rerun: 0.1 }, cacheKey) {
        return utils_1.default.readCacheData(cacheKey).then(data => {
            if (data) {
                this.items = data;
                this.run(config);
                this.items = [];
            }
        });
    }
    /**
     *
     * @param maxAge
     */
    writeCacheData(maxAge, cacheKey) {
        utils_1.default.writeCacheData(cacheKey, maxAge, this.items);
    }
    /**
     * 根据score进行再排序,大的向前排
     * 转换为ScriptFilterItem
     * @param sf
     */
    convertWorkflowItems() {
        this.sortedItems = this.items.sort((a, b) => {
            var _a, _b;
            return ((_a = b.score) !== null && _a !== void 0 ? _a : 0) - ((_b = a.score) !== null && _b !== void 0 ? _b : 0);
        }).map(item => item.item);
        return this;
    }
    /**
     * 构建搜索项
     * @param item
     */
    addWorkflowItem(item) {
        this.items.push(item);
        return this;
    }
    /**
     * 过滤结果集
     */
    filterWorkflowItemsBy(query = '', params, noResultsItem) {
        query = query.trim();
        if (query) {
            let filterItems = this.items.filter((item) => {
                // 对于没有该参数属性的，返回true，通过
                return params.some((p) => {
                    var _a;
                    const scriptFilterItem = item.item;
                    if (scriptFilterItem[p] === undefined) {
                        return;
                    }
                    if (((_a = scriptFilterItem[p]) === null || _a === void 0 ? void 0 : _a.match(utils_1.CN_CHAR_REGEX)) && !query.match(utils_1.CN_CHAR_REGEX)) {
                        return pinyin_pro_1.pinyin(scriptFilterItem[p], {
                            toneType: 'none',
                            nonZh: 'consecutive',
                        }).replace(/\s/g, '').match(new RegExp(query, 'i'));
                    }
                    return scriptFilterItem[p].match(new RegExp(query, 'i'));
                });
            });
            if (filterItems.length === 0 && noResultsItem) {
                this.items = [noResultsItem];
            }
            else {
                this.items = filterItems;
            }
        }
        return this;
    }
    /**
     * 输出
     */
    run(config = {}) {
        console.log(JSON.stringify({
            ...config,
            items: this.convertWorkflowItems().sortedItems,
        }));
    }
}
exports.Workflow = Workflow;
