/// <reference types="node" />
import { ScriptFilter, ScriptFilterItem } from './interface';
export declare const CN_CHAR_REGEX: RegExp;
declare const utils: {
    /**
     * 根据params列出的属性进行过滤，不区分大小写
     * 如果查询关键词为空，返回原数组
     * @param items
     * @param query
     * @param params
     * @param noResultsItem 如果过滤完没有结果则显示该条目
     * @return {ScriptFilterItem[]}
     */
    filterItemsBy: (items: ScriptFilterItem[], query: string | undefined, params: (keyof Pick<ScriptFilterItem, 'title' | 'subtitle' | 'uid' | 'arg'>)[], noResultsItem?: ScriptFilterItem | undefined) => ScriptFilterItem[];
    /**
     * 构建单个项
     * @param item
     */
    buildItem: (item: ScriptFilterItem) => ScriptFilterItem;
    /**
     * 路径中空格加转义字符
     * @param filepath
     */
    escapeFilePath: (filepath: string) => string;
    quickLookUrl4File: (filename: string) => string;
    /**
     * 输出列表
     * @param sf
     */
    printScriptFilter: (sf: ScriptFilter) => void;
    /**
     * Script item arg为字符串，有时需要多个参数传递，可以使用字符串拼接
     * @param args
     * @return {string}
     */
    joinMultiArg: (...args: (number | string | boolean)[]) => string;
    /**
     *
     * @param argStr
     * @return {string[]}
     */
    splitMultiArgStr: (argStr: string) => string[];
    /**
     * Mac自带emoji表情支持
     * @see https://support.apple.com/zh-cn/guide/mac-help/mchlp1560/mac
     */
    emoji: {
        checked: string;
        unchecked: string;
        locked: string;
        greenChecked: string;
        greenUnChecked: string;
    };
    /**
     * 设置当前workflow环境变量
     * @param key
     * @param value
     */
    setVariable: (key: string, value: any) => void;
    /**
     * 删除当前workflow环境变量
     * @param key
     */
    removeVariable: (key: string) => void;
    /**
     * 拷贝到系统剪贴板
     */
    copyToClipboard(thePath: string): void;
    /**
     * 剪贴板图片另存到某位置
     * @param filePath
     */
    writeToPicFileFromClipboard(filePath: string): void;
    formatBytes(bytes: number, decimals?: number): string;
    /**
     * 创建缓存文件夹
     */
    useCache(): void;
    writeCacheData<T>(key: string, maxAge: number, data: T): Promise<unknown>;
    readCacheData<T_1>(key: string): Promise<T_1 | null>;
    /**
     * 不添加新行打印
     * @param options
     */
    log(str: string | Uint8Array, encoding?: BufferEncoding | undefined, cb?: ((err?: Error | undefined) => void) | undefined): void;
};
export default utils;
