"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CN_CHAR_REGEX = void 0;
const pinyin_pro_1 = require("pinyin-pro");
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const SPLIT_TOKEN = '✩';
exports.CN_CHAR_REGEX = /[\u4E00-\u9FA5]|[\uFE30-\uFFA0]/gi;
const pathUtils = {
    replaceSpace: (path) => path.replace(/\s/g, '%20'),
    replaceRelativeHomePath: (path) => path.replace('~', process.env.HOME),
    process: (path) => pathUtils.replaceRelativeHomePath(pathUtils.replaceSpace(path)),
};
const utils = {
    /**
     * 根据params列出的属性进行过滤，不区分大小写
     * 如果查询关键词为空，返回原数组
     * @param items
     * @param query
     * @param params
     * @param noResultsItem 如果过滤完没有结果则显示该条目
     * @return {ScriptFilterItem[]}
     */
    filterItemsBy: (items, query = '', params, noResultsItem) => {
        query = query.trim();
        if (query) {
            let filterItems = items.filter((item) => {
                // 对于没有该参数属性的，返回true，通过
                return params.some((p) => {
                    var _a;
                    if (item[p] === undefined) {
                        return;
                    }
                    if (((_a = item[p]) === null || _a === void 0 ? void 0 : _a.match(exports.CN_CHAR_REGEX)) && !query.match(exports.CN_CHAR_REGEX)) {
                        return pinyin_pro_1.pinyin(item[p], {
                            toneType: 'none',
                            nonZh: 'consecutive',
                        }).replace(/\s/g, '').match(new RegExp(query, 'i'));
                    }
                    return item[p].match(new RegExp(query, 'i'));
                });
            });
            if (filterItems.length === 0 && noResultsItem) {
                return [noResultsItem];
            }
            return filterItems;
        }
        else {
            return items;
        }
    },
    /**
     * 构建单个项
     * @param item
     */
    buildItem: (item) => item,
    /**
     * 路径中空格加转义字符
     * @param filepath
     */
    escapeFilePath: (filepath) => pathUtils.replaceRelativeHomePath(filepath).replace(/(\s)/, '\\$1'),
    quickLookUrl4File: (filename) => `file://${pathUtils.replaceSpace(filename)}`,
    /**
     * 输出列表
     * @param sf
     */
    printScriptFilter: (sf) => {
        console.log(JSON.stringify(sf));
    },
    /**
     * Script item arg为字符串，有时需要多个参数传递，可以使用字符串拼接
     * @param args
     * @return {string}
     */
    joinMultiArg: (...args) => args.join(SPLIT_TOKEN),
    /**
     *
     * @param argStr
     * @return {string[]}
     */
    splitMultiArgStr: (argStr) => argStr.split(SPLIT_TOKEN),
    /**
     * Mac自带emoji表情支持
     * @see https://support.apple.com/zh-cn/guide/mac-help/mchlp1560/mac
     */
    emoji: {
        checked: '☑️',
        unchecked: '✖️',
        locked: '🔒',
        greenChecked: '✅',
        greenUnChecked: '❎'
    },
    /**
     * 设置当前workflow环境变量
     * @param key
     * @param value
     */
    setVariable: (key, value) => {
        child_process_1.execSync(`osascript -e 'tell application id "com.runningwithcrayons.Alfred" to set configuration "${key}" to value "${String(value)}" in workflow "${process.env.alfred_workflow_bundleid}"'`);
    },
    /**
     * 删除当前workflow环境变量
     * @param key
     */
    removeVariable: (key) => {
        child_process_1.execSync(`osascript -e 'tell application id "com.runningwithcrayons.Alfred" to remove configuration "${key}" in workflow "${process.env.alfred_workflow_bundleid}"'`);
    },
    /**
     * 拷贝到系统剪贴板
     */
    copyToClipboard(thePath) {
        thePath = pathUtils.replaceSpace(thePath);
        child_process_1.execSync(`osascript -e 'set the clipboard to POSIX file "${thePath}"\n delay 1'`);
    },
    /**
     * 剪贴板图片另存到某位置
     * @param filePath
     */
    writeToPicFileFromClipboard(filePath) {
        filePath = pathUtils.process(filePath);
        child_process_1.execSync(`osascript -e 'try
  set imageData to the clipboard as {«class PNGf»}
on error
  tell me to error "Clipboard data does not seem to be an image"
end try

set filePath to "${filePath}"
try
set imageFile to open for access filePath with write permission
write imageData to imageFile
close access imageFile
on error
try
        close access myFile
    end try
end try
'`);
    },
    formatBytes(bytes, decimals = 2) {
        if (bytes === 0)
            return '0 Bytes';
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    },
    /**
     * 创建缓存文件夹
     */
    useCache() {
        child_process_1.execSync(`[[ -d "${process.env.alfred_workflow_cache}" ]] || mkdir "${process.env.alfred_workflow_cache}"`);
    },
    writeCacheData(key, maxAge, data) {
        return new Promise(resolve => {
            fs_1.default.writeFile(`${process.env.alfred_workflow_cache}/${key}.cache`, JSON.stringify({
                maxAge: Date.now() + maxAge,
                data,
            }), resolve);
        });
    },
    readCacheData(key) {
        return new Promise(resolve => {
            fs_1.default.readFile(`${process.env.alfred_workflow_cache}/${key}.cache`, { encoding: 'utf8' }, (err, res) => {
                if (err) {
                    resolve(null);
                    return;
                }
                const data = JSON.parse(res);
                if (data.maxAge < Date.now()) {
                    resolve(null);
                }
                else {
                    resolve(data.data);
                }
            });
        });
    },
    /**
     * 不添加新行打印
     * @param options
     */
    log(...options) {
        process.stdout.write(...options);
    },
};
exports.default = utils;
